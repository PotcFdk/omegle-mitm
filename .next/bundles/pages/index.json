{"component":"module.exports =\nwebpackJsonp([2],{\n\n/***/ 239:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(process, __resourceQuery) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(16);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(10);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(11);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(18);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(17);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = __webpack_require__(7);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _Omegle = __webpack_require__(540);\n\nvar _Omegle2 = _interopRequireDefault(_Omegle);\n\nvar _head = __webpack_require__(122);\n\nvar _head2 = _interopRequireDefault(_head);\n\nvar _Messages = __webpack_require__(539);\n\nvar _Messages2 = _interopRequireDefault(_Messages);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar OmegleView = function (_Component) {\n    (0, _inherits3.default)(OmegleView, _Component);\n\n    function OmegleView(props) {\n        (0, _classCallCheck3.default)(this, OmegleView);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (OmegleView.__proto__ || (0, _getPrototypeOf2.default)(OmegleView)).call(this, props));\n\n        _this.state = {\n            messages: [],\n            started: false\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(OmegleView, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {}\n    }, {\n        key: 'start',\n        value: function start(e) {\n            var _this2 = this;\n\n            e.preventDefault();\n            this.setState({ started: true });\n            var c1 = new _Omegle2.default();\n            var c2 = new _Omegle2.default();\n\n            c1.on('message', function (txt) {\n                var m = _this2.state.messages;\n                m.push({ type: 'Message', name: 'Person 1', id: c1.clientID, text: txt });\n                _this2.setState({ messages: m });\n                c2.sendMessage(txt);\n            });\n\n            c2.on('message', function (txt) {\n                var m = _this2.state.messages;\n                m.push({ type: 'Message', name: 'Person 2', id: c2.clientID, text: txt });\n                _this2.setState({ messages: m });\n                c1.sendMessage(txt);\n            });\n\n            c1.on('serverMessage', function (txt) {\n                var m = _this2.state.messages;\n                m.push({ type: 'Message', name: 'Server', id: c1.clientID, text: txt });\n                _this2.setState({ messages: m });\n            });\n\n            c2.on('serverMessage', function (txt) {\n                var m = _this2.state.messages;\n                m.push({ type: 'Message', name: 'Server', id: c2.clientID, text: txt });\n                _this2.setState({ messages: m });\n            });\n\n            c1.on('serverDown', function () {\n                var m = _this2.state.messages;\n                m.push({ type: 'Message', name: 'Server', id: c1.clientID, text: 'Server seems down' });\n                _this2.setState({ messages: m });\n            });\n\n            c2.on('serverDown', function () {\n                var m = _this2.state.messages;\n                m.push({ type: 'Message', name: 'Server', id: c2.clientID, text: 'Server seems down' });\n                _this2.setState({ messages: m });\n            });\n\n            c1.on('typing', function () {\n                c2.sendTyping();\n            });\n\n            c2.on('typing', function () {\n                c1.sendTyping();\n            });\n\n            c1.on('typing', function () {\n                c2.sendTyping();\n            });\n\n            c1.on('disconnect', function () {\n                var m = _this2.state.messages;\n                c1.start();\n                c2.start();\n                m.push({ type: 'Disconnect' });\n            });\n\n            c2.on('disconnect', function () {\n                var m = _this2.state.messages;\n\n                c2.start();\n                c2.start();\n                m.push({ type: 'Disconnect' });\n            });\n\n            c1.start();\n            c2.start();\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var messages = [];\n            var content = void 0;\n\n            if (!this.state.started) {\n                content = _react2.default.createElement(\n                    'div',\n                    { className: 'start' },\n                    _react2.default.createElement(\n                        'a',\n                        { href: '#', className: 'startBtn', onClick: this.start.bind(this) },\n                        'Start'\n                    )\n                );\n            } else {\n\n                content = _react2.default.createElement(_Messages2.default, { messages: this.state.messages });\n            }\n\n            return _react2.default.createElement(\n                'div',\n                null,\n                _react2.default.createElement(\n                    _head2.default,\n                    null,\n                    _react2.default.createElement(\n                        'style',\n                        null,\n                        '\\n                body {\\n                  font-family: Verdana;\\n                }\\n\\n                .start {\\n                  width: 100vw;\\n                  height: 100vh;\\n                  display: flex;\\n                  justify-content: space-around;\\n                  align-items: center;\\n                }\\n\\n                .startBtn {\\n                  text-decoration: none;\\n                  padding: 30px;\\n                  color: white;\\n                  background-color: #ed2d23;\\n                  border-radius: 15px;\\n                  font-size: 56px;\\n                }\\n\\n                .messages {\\n                  width: 100vw;\\n                  height: 100vh;\\n                  overflow: auto;\\n                }\\n\\n                .message {\\n                  display: flex;\\n                  margin-bottom: 3px;\\n                  align-items: center;\\n                }\\n                .nickName {\\n                  color: \"#EFEFEF\";\\n                  margin-right: 30px;\\n                  font-size: 11px;\\n                }\\n              '\n                    )\n                ),\n                content\n            );\n        }\n    }]);\n    return OmegleView;\n}(_react.Component);\n\nexports.default = OmegleView;\n//# sourceMappingURL=data:application/json;base64,\n\n ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', \"/Users/timbroddin/Sites/omegle-mitm/pages/index.js\"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, \"/Users/timbroddin/Sites/omegle-mitm/pages/index.js\"); } } })();\n    (function (Component, route) {\n      if (false) return\n      if (false) return\n\n      var qs = __webpack_require__(45)\n      var params = qs.parse(__resourceQuery.slice(1))\n      if (params.entry == null) return\n\n      module.hot.accept()\n      Component.__route = route\n\n      if (module.hot.status() === 'idle') return\n\n      var components = next.router.components\n      for (var r in components) {\n        if (!components.hasOwnProperty(r)) continue\n\n        if (components[r].Component.__route === route) {\n          next.router.update(r, Component)\n        }\n      }\n    })(module.exports.default || module.exports, \"/\")\n  \n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), \"?entry\"))\n\n/***/ },\n\n/***/ 539:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(process) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(16);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(10);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(11);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(18);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(17);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = __webpack_require__(7);\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Messages = function (_Component) {\n    (0, _inherits3.default)(Messages, _Component);\n\n    function Messages() {\n        (0, _classCallCheck3.default)(this, Messages);\n        return (0, _possibleConstructorReturn3.default)(this, (Messages.__proto__ || (0, _getPrototypeOf2.default)(Messages)).apply(this, arguments));\n    }\n\n    (0, _createClass3.default)(Messages, [{\n        key: \"componentDidUpdate\",\n        value: function componentDidUpdate() {\n            this.refs.messages.scrollTop = this.refs.messages.scrollHeight;\n        }\n    }, {\n        key: \"render\",\n        value: function render() {\n            var messages = this.props.messages;\n\n\n            return _react2.default.createElement(\n                \"div\",\n                { className: \"messages\", ref: \"messages\" },\n                messages.map(function (message, k) {\n                    if (message.type == 'Message') {\n                        return _react2.default.createElement(\n                            \"div\",\n                            { className: \"message\", key: \"message-\" + k },\n                            _react2.default.createElement(\n                                \"span\",\n                                { className: \"nickName\" },\n                                message.name\n                            ),\n                            _react2.default.createElement(\n                                \"span\",\n                                { className: \"message\" },\n                                message.text\n                            )\n                        );\n                    } else {\n                        return _react2.default.createElement(\"hr\", { key: \"message-\" + k });\n                    }\n                })\n            );\n        }\n    }]);\n    return Messages;\n}(_react.Component);\n\nexports.default = Messages;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvTWVzc2FnZXMuanMiXSwibmFtZXMiOlsiTWVzc2FnZXMiLCJyZWZzIiwibWVzc2FnZXMiLCJzY3JvbGxUb3AiLCJzY3JvbGxIZWlnaHQiLCJwcm9wcyIsIm1hcCIsIm1lc3NhZ2UiLCJrIiwidHlwZSIsIm5hbWUiLCJ0ZXh0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7SUFFTUEsUTs7Ozs7Ozs7Ozs2Q0FDaUI7QUFDbkIsaUJBQUtDLElBQUwsQ0FBVUMsUUFBVixDQUFtQkMsU0FBbkIsR0FBK0IsS0FBS0YsSUFBTCxDQUFVQyxRQUFWLENBQW1CRSxZQUFsRDtBQUNEOzs7aUNBRVE7QUFBQSxnQkFDQUYsUUFEQSxHQUNZLEtBQUtHLEtBRGpCLENBQ0FILFFBREE7OztBQUdQLG1CQUFPO0FBQUE7QUFBQSxrQkFBSyxXQUFVLFVBQWYsRUFBMEIsS0FBSSxVQUE5QjtBQUNGQSx5QkFBU0ksR0FBVCxDQUFhLFVBQUNDLE9BQUQsRUFBVUMsQ0FBVixFQUFnQjtBQUMxQix3QkFBSUQsUUFBUUUsSUFBUixJQUFnQixTQUFwQixFQUErQjtBQUMzQiwrQkFBTztBQUFBO0FBQUEsOEJBQUssV0FBVSxTQUFmLEVBQXlCLGtCQUFnQkQsQ0FBekM7QUFDSDtBQUFBO0FBQUEsa0NBQU0sV0FBVSxVQUFoQjtBQUE0QkQsd0NBQVFHO0FBQXBDLDZCQURHO0FBRUg7QUFBQTtBQUFBLGtDQUFNLFdBQVUsU0FBaEI7QUFBMkJILHdDQUFRSTtBQUFuQztBQUZHLHlCQUFQO0FBSUgscUJBTEQsTUFLTztBQUNILCtCQUFPLHNDQUFJLGtCQUFnQkgsQ0FBcEIsR0FBUDtBQUNIO0FBQ0osaUJBVEE7QUFERSxhQUFQO0FBWUQ7Ozs7O2tCQUlZUixRIiwiZmlsZSI6Ik1lc3NhZ2VzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy90aW1icm9kZGluL1NpdGVzL29tZWdsZS1taXRtIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50fSBmcm9tICdyZWFjdCc7XG5cbmNsYXNzIE1lc3NhZ2VzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHRoaXMucmVmcy5tZXNzYWdlcy5zY3JvbGxUb3AgPSB0aGlzLnJlZnMubWVzc2FnZXMuc2Nyb2xsSGVpZ2h0O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHttZXNzYWdlc30gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwibWVzc2FnZXNcIiByZWY9XCJtZXNzYWdlc1wiPlxuICAgICAgICB7bWVzc2FnZXMubWFwKChtZXNzYWdlLCBrKSA9PiB7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS50eXBlID09ICdNZXNzYWdlJykge1xuICAgICAgICAgICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cIm1lc3NhZ2VcIiBrZXk9e2BtZXNzYWdlLSR7a31gfT5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibmlja05hbWVcIj57bWVzc2FnZS5uYW1lfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibWVzc2FnZVwiPnttZXNzYWdlLnRleHR9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gPGhyIGtleT17YG1lc3NhZ2UtJHtrfWB9Lz5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSl9XG4gICAgPC9kaXY+XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBNZXNzYWdlcztcbiJdfQ==\n\n ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', \"/Users/timbroddin/Sites/omegle-mitm/components/Messages.js\"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, \"/Users/timbroddin/Sites/omegle-mitm/components/Messages.js\"); } } })();\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ },\n\n/***/ 540:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(process) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(10);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(11);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Omegle = function () {\n    function Omegle() {\n        (0, _classCallCheck3.default)(this, Omegle);\n\n        this.listeners = [];\n        this.isConnected = true;\n        this.queueMessages = [];\n        this.hasPartner = false;\n        this.eventTries = 0;\n    }\n\n    (0, _createClass3.default)(Omegle, [{\n        key: 'start',\n        value: function start() {\n            var _this = this;\n\n            this.queueMessages = [];\n            this.eventTries = 0;\n\n            fetch('/proxy/start?firstevents=1&lang=nl', {\n                method: 'POST',\n                headers: {\n                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'\n                }\n            }).then(function (response) {\n                return response.text();\n            }).then(function (text) {\n                if (text) {\n                    return JSON.parse(text);\n                } else {\n                    throw new Error('No text');\n                }\n            }).then(function (response) {\n                if (response && response.clientID) {\n                    console.log('Connected to Omegle');\n                    _this.connected();\n                    _this.parseEvents(response.events);\n                    _this.clientID = response.clientID;\n                    console.log('ClientId: ' + _this.clientID);\n                    _this.isConnected = true;\n                    _this.getEvents();\n                } else {\n                    console.log('Server down?');\n                    _this.message('serverDown');\n                    setTimeout(function () {\n                        _this.start();\n                    }, 30000);\n                }\n            }).catch(function (err) {\n                console.log(err);\n            });\n        }\n    }, {\n        key: 'getEvents',\n        value: function getEvents() {\n            var _this2 = this;\n\n            if (!this.isConnected) return false;\n\n            console.log(this.clientID + ' Getting events');\n            fetch('/proxy/events', {\n                method: 'POST',\n                body: 'id=' + encodeURIComponent(this.clientID),\n                json: true,\n                headers: {\n                    'Connection': 'keep-alive',\n                    'User-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36',\n                    'Content-Type': 'application/x-www-form-urlencoded'\n\n                }\n            }).then(function (response) {\n                return response.text();\n            }).then(function (text) {\n                return JSON.parse(text);\n            }).then(function (response) {\n                if (response) {\n                    _this2.parseEvents(response);\n                    _this2.getEvents();\n                } else {\n                    _this2.eventTries++;\n                    console.log('Tries: ' + _this2.eventTries);\n                    if (_this2.eventTries > 5) {\n                        _this2.disconnected();\n                    } else {\n                        setTimeout(function () {\n                            _this2.getEvents();\n                        }, 1000);\n                    }\n                }\n            });\n        }\n    }, {\n        key: 'parseEvents',\n        value: function parseEvents(events) {\n            var _this3 = this;\n\n            if (!events) return;\n\n            events.forEach(function (event) {\n                var type = event[0];\n                var payload = event[1];\n\n                switch (type) {\n                    case 'gotMessage':\n                        _this3.receiveMessage(payload);\n                        break;\n                    case 'typing':\n                        _this3.typing();\n                        break;\n                    case 'statusInfo':\n                        _this3.statusInfo(payload);\n                        break;\n                    case 'strangerDisconnected':\n                        _this3.disconnected();\n                        break;\n                    case 'connected':\n                        _this3.hasPartner = true;\n                        _this3.queueMessages.forEach(function (txt) {\n                            console.log('Sending message queue');\n                            _this3.sendMessage(txt);\n                        });\n                        break;\n                    case 'serverMessage':\n                        _this3.serverMessage(payload);\n                        break;\n                    default:\n                }\n            });\n        }\n    }, {\n        key: 'connected',\n        value: function connected() {\n            this.message('connect', true);\n        }\n    }, {\n        key: 'receiveMessage',\n        value: function receiveMessage(text) {\n            this.message('message', text);\n        }\n    }, {\n        key: 'serverMessage',\n        value: function serverMessage(text) {\n            this.message('serverMessage', text);\n        }\n    }, {\n        key: 'statusInfo',\n        value: function statusInfo(info) {}\n    }, {\n        key: 'typing',\n        value: function typing() {\n            console.log(this.clientID + ' is typing');\n\n            this.message('typing', true);\n        }\n    }, {\n        key: 'sendMessage',\n        value: function sendMessage(txt) {\n            if (!this.hasPartner) {\n                console.log('Add to queue');\n                this.queueMessages.push(text);\n            }\n\n            console.log(this.clientID + ' Send message ' + txt);\n\n            fetch('/proxy/send', {\n                method: 'POST',\n                body: 'id=' + encodeURIComponent(this.clientID) + '&msg=' + encodeURIComponent(txt),\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).then(function (response) {});\n        }\n    }, {\n        key: 'sendTyping',\n        value: function sendTyping() {\n\n            console.log(this.clientID + ' Send typing');\n\n            fetch('/proxy/typing', {\n                method: 'POST',\n                body: 'id=' + encodeURIComponent(this.clientID),\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).then(function (response) {});\n        }\n    }, {\n        key: 'disconnected',\n        value: function disconnected() {\n            this.isConnected = false;\n            this.message('disconnect', true);\n        }\n    }, {\n        key: 'on',\n        value: function on(type, cb) {\n            if (!this.listeners[type]) {\n                this.listeners[type] = [];\n            }\n            this.listeners[type].push(cb);\n        }\n    }, {\n        key: 'randId',\n        value: function randId() {\n            for (var a = \"\", b = 0; 8 > b; b++) {\n                var c = Math.floor(32 * Math.random()),\n                    a = a + \"23456789ABCDEFGHJKLMNPQRSTUVWXYZ\".charAt(c);\n            }return a;\n        }\n    }, {\n        key: 'message',\n        value: function message(type, payload) {\n            if (this.listeners[type]) {\n                this.listeners[type].forEach(function (cb) {\n                    cb(payload);\n                });\n            } else {}\n        }\n    }]);\n    return Omegle;\n}();\n\nexports.default = Omegle;\n//# sourceMappingURL=data:application/json;base64,\n\n ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', \"/Users/timbroddin/Sites/omegle-mitm/omegle/Omegle.js\"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, \"/Users/timbroddin/Sites/omegle-mitm/omegle/Omegle.js\"); } } })();\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ },\n\n/***/ 576:\n/***/ function(module, exports, __webpack_require__) {\n\n__webpack_require__(33);\nmodule.exports = __webpack_require__(239);\n\n\n/***/ }\n\n},[576]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}