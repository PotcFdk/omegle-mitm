{"component":"module.exports =\nwebpackJsonp([2],{\n\n/***/ 239:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(process, __resourceQuery) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(16);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(10);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(11);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(18);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(17);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = __webpack_require__(7);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _Omegle = __webpack_require__(540);\n\nvar _Omegle2 = _interopRequireDefault(_Omegle);\n\nvar _head = __webpack_require__(122);\n\nvar _head2 = _interopRequireDefault(_head);\n\nvar _Messages = __webpack_require__(539);\n\nvar _Messages2 = _interopRequireDefault(_Messages);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar OmegleView = function (_Component) {\n    (0, _inherits3.default)(OmegleView, _Component);\n\n    function OmegleView(props) {\n        (0, _classCallCheck3.default)(this, OmegleView);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (OmegleView.__proto__ || (0, _getPrototypeOf2.default)(OmegleView)).call(this, props));\n\n        _this.state = {\n            messages: [],\n            started: false\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(OmegleView, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {}\n    }, {\n        key: 'start',\n        value: function start(e) {\n            var _this2 = this;\n\n            e.preventDefault();\n            this.setState({ started: true });\n            var c1 = new _Omegle2.default();\n            var c2 = new _Omegle2.default();\n\n            c1.on('message', function (txt) {\n                var m = _this2.state.messages;\n                m.push({ type: 'Message', name: 'Person 1', id: c1.clientID, text: txt });\n                _this2.setState({ messages: m });\n                c2.sendMessage(txt);\n            });\n\n            c2.on('message', function (txt) {\n                var m = _this2.state.messages;\n                m.push({ type: 'Message', name: 'Person 2', id: c2.clientID, text: txt });\n                _this2.setState({ messages: m });\n                c1.sendMessage(txt);\n            });\n\n            c1.on('typing', function () {\n                c2.sendTyping();\n            });\n\n            c2.on('typing', function () {\n                c1.sendTyping();\n            });\n\n            c1.on('typing', function () {\n                c2.sendTyping();\n            });\n\n            c1.on('disconnect', function () {\n                var m = _this2.state.messages;\n                c1.start();\n                c2.start();\n                m.push({ type: 'Disconnect' });\n            });\n\n            c2.on('disconnect', function () {\n                var m = _this2.state.messages;\n\n                c2.start();\n                c2.start();\n                m.push({ type: 'Disconnect' });\n            });\n\n            c1.start();\n            c2.start();\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var messages = [];\n            var content = void 0;\n\n            if (!this.state.started) {\n                content = _react2.default.createElement(\n                    'div',\n                    { className: 'start' },\n                    _react2.default.createElement(\n                        'a',\n                        { href: '#', className: 'startBtn', onClick: this.start.bind(this) },\n                        'Start'\n                    )\n                );\n            } else {\n\n                content = _react2.default.createElement(_Messages2.default, { messages: this.state.messages });\n            }\n\n            return _react2.default.createElement(\n                'div',\n                null,\n                _react2.default.createElement(\n                    _head2.default,\n                    null,\n                    _react2.default.createElement(\n                        'style',\n                        null,\n                        '\\n                body {\\n                  font-family: Verdana;\\n                }\\n\\n                .start {\\n                  width: 100vw;\\n                  height: 100vh;\\n                  display: flex;\\n                  justify-content: space-around;\\n                  align-items: center;\\n                }\\n\\n                .startBtn {\\n                  text-decoration: none;\\n                  padding: 30px;\\n                  color: white;\\n                  background-color: #ed2d23;\\n                  border-radius: 15px;\\n                  font-size: 56px;\\n                }\\n\\n                .messages {\\n                  width: 100vw;\\n                  height: 100vh;\\n                  overflow: auto;\\n                }\\n\\n                .message {\\n                  display: flex;\\n                  margin-bottom: 3px;\\n                  align-items: center;\\n                }\\n                .nickName {\\n                  color: \"#EFEFEF\";\\n                  margin-right: 30px;\\n                  font-size: 11px;\\n                }\\n              '\n                    )\n                ),\n                content\n            );\n        }\n    }]);\n    return OmegleView;\n}(_react.Component);\n\nexports.default = OmegleView;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2VzL2luZGV4LmpzP2VudHJ5Il0sIm5hbWVzIjpbIk9tZWdsZVZpZXciLCJwcm9wcyIsInN0YXRlIiwibWVzc2FnZXMiLCJzdGFydGVkIiwiZSIsInByZXZlbnREZWZhdWx0Iiwic2V0U3RhdGUiLCJjMSIsImMyIiwib24iLCJ0eHQiLCJtIiwicHVzaCIsInR5cGUiLCJuYW1lIiwiaWQiLCJjbGllbnRJRCIsInRleHQiLCJzZW5kTWVzc2FnZSIsInNlbmRUeXBpbmciLCJzdGFydCIsImNvbnRlbnQiLCJiaW5kIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7SUFFTUEsVTs7O0FBQ0Ysd0JBQVlDLEtBQVosRUFBbUI7QUFBQTs7QUFBQSxrSkFDVEEsS0FEUzs7QUFHZixjQUFLQyxLQUFMLEdBQWE7QUFDVEMsc0JBQVUsRUFERDtBQUVUQyxxQkFBUztBQUZBLFNBQWI7QUFIZTtBQU9sQjs7Ozs0Q0FFbUIsQ0FBRTs7OzhCQUVoQkMsQyxFQUFHO0FBQUE7O0FBQ0xBLGNBQUVDLGNBQUY7QUFDQSxpQkFBS0MsUUFBTCxDQUFjLEVBQUNILFNBQVMsSUFBVixFQUFkO0FBQ0EsZ0JBQUlJLEtBQUssc0JBQVQ7QUFDQSxnQkFBSUMsS0FBSyxzQkFBVDs7QUFFQUQsZUFBR0UsRUFBSCxDQUFNLFNBQU4sRUFBaUIsVUFBQ0MsR0FBRCxFQUFTO0FBQ3RCLG9CQUFJQyxJQUFJLE9BQUtWLEtBQUwsQ0FBV0MsUUFBbkI7QUFDQVMsa0JBQUVDLElBQUYsQ0FBTyxFQUFDQyxNQUFNLFNBQVAsRUFBa0JDLE1BQU0sVUFBeEIsRUFBb0NDLElBQUlSLEdBQUdTLFFBQTNDLEVBQXFEQyxNQUFNUCxHQUEzRCxFQUFQO0FBQ0EsdUJBQUtKLFFBQUwsQ0FBYyxFQUFDSixVQUFVUyxDQUFYLEVBQWQ7QUFDQUgsbUJBQUdVLFdBQUgsQ0FBZVIsR0FBZjtBQUNILGFBTEQ7O0FBT0FGLGVBQUdDLEVBQUgsQ0FBTSxTQUFOLEVBQWlCLFVBQUNDLEdBQUQsRUFBUztBQUN0QixvQkFBSUMsSUFBSSxPQUFLVixLQUFMLENBQVdDLFFBQW5CO0FBQ0FTLGtCQUFFQyxJQUFGLENBQU8sRUFBQ0MsTUFBTSxTQUFQLEVBQWtCQyxNQUFNLFVBQXhCLEVBQW9DQyxJQUFJUCxHQUFHUSxRQUEzQyxFQUFxREMsTUFBTVAsR0FBM0QsRUFBUDtBQUNBLHVCQUFLSixRQUFMLENBQWMsRUFBQ0osVUFBVVMsQ0FBWCxFQUFkO0FBQ0FKLG1CQUFHVyxXQUFILENBQWVSLEdBQWY7QUFDSCxhQUxEOztBQU9BSCxlQUFHRSxFQUFILENBQU0sUUFBTixFQUFnQixZQUFNO0FBQ2xCRCxtQkFBR1csVUFBSDtBQUNILGFBRkQ7O0FBSUFYLGVBQUdDLEVBQUgsQ0FBTSxRQUFOLEVBQWdCLFlBQU07QUFDbEJGLG1CQUFHWSxVQUFIO0FBQ0gsYUFGRDs7QUFJQVosZUFBR0UsRUFBSCxDQUFNLFFBQU4sRUFBZ0IsWUFBTTtBQUNsQkQsbUJBQUdXLFVBQUg7QUFDSCxhQUZEOztBQUlBWixlQUFHRSxFQUFILENBQU0sWUFBTixFQUFvQixZQUFNO0FBQ3RCLG9CQUFJRSxJQUFJLE9BQUtWLEtBQUwsQ0FBV0MsUUFBbkI7QUFDQUssbUJBQUdhLEtBQUg7QUFDQVosbUJBQUdZLEtBQUg7QUFDQVQsa0JBQUVDLElBQUYsQ0FBTyxFQUFDQyxNQUFNLFlBQVAsRUFBUDtBQUNILGFBTEQ7O0FBT0FMLGVBQUdDLEVBQUgsQ0FBTSxZQUFOLEVBQW9CLFlBQU07QUFDdEIsb0JBQUlFLElBQUksT0FBS1YsS0FBTCxDQUFXQyxRQUFuQjs7QUFFQU0sbUJBQUdZLEtBQUg7QUFDQVosbUJBQUdZLEtBQUg7QUFDQVQsa0JBQUVDLElBQUYsQ0FBTyxFQUFDQyxNQUFNLFlBQVAsRUFBUDtBQUVILGFBUEQ7O0FBU0FOLGVBQUdhLEtBQUg7QUFDQVosZUFBR1ksS0FBSDtBQUVIOzs7aUNBRVE7QUFDTCxnQkFBSWxCLFdBQVcsRUFBZjtBQUNBLGdCQUFJbUIsZ0JBQUo7O0FBRUEsZ0JBQUksQ0FBQyxLQUFLcEIsS0FBTCxDQUFXRSxPQUFoQixFQUF5QjtBQUNyQmtCLDBCQUFVO0FBQUE7QUFBQSxzQkFBSyxXQUFVLE9BQWY7QUFDTjtBQUFBO0FBQUEsMEJBQUcsTUFBSyxHQUFSLEVBQVksV0FBVSxVQUF0QixFQUFpQyxTQUFTLEtBQUtELEtBQUwsQ0FBV0UsSUFBWCxDQUFnQixJQUFoQixDQUExQztBQUFBO0FBQUE7QUFETSxpQkFBVjtBQUdILGFBSkQsTUFJTzs7QUFFSEQsMEJBQVUsb0RBQVUsVUFBVSxLQUFLcEIsS0FBTCxDQUFXQyxRQUEvQixHQUFWO0FBQ0g7O0FBRUQsbUJBQU87QUFBQTtBQUFBO0FBQ0w7QUFBQTtBQUFBO0FBQ0U7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQURGLGlCQURLO0FBMENKbUI7QUExQ0ksYUFBUDtBQTZDSDs7Ozs7a0JBR1V0QixVIiwiZmlsZSI6ImluZGV4LmpzP2VudHJ5Iiwic291cmNlUm9vdCI6Ii9Vc2Vycy90aW1icm9kZGluL1NpdGVzL29tZWdsZS1taXRtIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50fSBmcm9tICdyZWFjdCdcbmltcG9ydCBPbWVnbGUgZnJvbSAnLi4vb21lZ2xlL09tZWdsZSc7XG5pbXBvcnQgSGVhZCBmcm9tICduZXh0L2hlYWQnO1xuaW1wb3J0IE1lc3NhZ2VzIGZyb20gJy4uL2NvbXBvbmVudHMvTWVzc2FnZXMnO1xuXG5jbGFzcyBPbWVnbGVWaWV3IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIG1lc3NhZ2VzOiBbXSxcbiAgICAgICAgICAgIHN0YXJ0ZWQ6IGZhbHNlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHt9XG5cbiAgICBzdGFydChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7c3RhcnRlZDogdHJ1ZX0pO1xuICAgICAgICBsZXQgYzEgPSBuZXcgT21lZ2xlKCk7XG4gICAgICAgIGxldCBjMiA9IG5ldyBPbWVnbGUoKTtcblxuICAgICAgICBjMS5vbignbWVzc2FnZScsICh0eHQpID0+IHtcbiAgICAgICAgICAgIGxldCBtID0gdGhpcy5zdGF0ZS5tZXNzYWdlcztcbiAgICAgICAgICAgIG0ucHVzaCh7dHlwZTogJ01lc3NhZ2UnLCBuYW1lOiAnUGVyc29uIDEnLCBpZDogYzEuY2xpZW50SUQsIHRleHQ6IHR4dH0pO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7bWVzc2FnZXM6IG19KTtcbiAgICAgICAgICAgIGMyLnNlbmRNZXNzYWdlKHR4dCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGMyLm9uKCdtZXNzYWdlJywgKHR4dCkgPT4ge1xuICAgICAgICAgICAgbGV0IG0gPSB0aGlzLnN0YXRlLm1lc3NhZ2VzO1xuICAgICAgICAgICAgbS5wdXNoKHt0eXBlOiAnTWVzc2FnZScsIG5hbWU6ICdQZXJzb24gMicsIGlkOiBjMi5jbGllbnRJRCwgdGV4dDogdHh0fSk7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHttZXNzYWdlczogbX0pO1xuICAgICAgICAgICAgYzEuc2VuZE1lc3NhZ2UodHh0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYzEub24oJ3R5cGluZycsICgpID0+IHtcbiAgICAgICAgICAgIGMyLnNlbmRUeXBpbmcoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYzIub24oJ3R5cGluZycsICgpID0+IHtcbiAgICAgICAgICAgIGMxLnNlbmRUeXBpbmcoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYzEub24oJ3R5cGluZycsICgpID0+IHtcbiAgICAgICAgICAgIGMyLnNlbmRUeXBpbmcoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYzEub24oJ2Rpc2Nvbm5lY3QnLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgbSA9IHRoaXMuc3RhdGUubWVzc2FnZXM7XG4gICAgICAgICAgICBjMS5zdGFydCgpO1xuICAgICAgICAgICAgYzIuc3RhcnQoKTtcbiAgICAgICAgICAgIG0ucHVzaCh7dHlwZTogJ0Rpc2Nvbm5lY3QnfSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYzIub24oJ2Rpc2Nvbm5lY3QnLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgbSA9IHRoaXMuc3RhdGUubWVzc2FnZXM7XG5cbiAgICAgICAgICAgIGMyLnN0YXJ0KCk7XG4gICAgICAgICAgICBjMi5zdGFydCgpO1xuICAgICAgICAgICAgbS5wdXNoKHt0eXBlOiAnRGlzY29ubmVjdCd9KVxuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGMxLnN0YXJ0KCk7XG4gICAgICAgIGMyLnN0YXJ0KCk7XG5cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGxldCBtZXNzYWdlcyA9IFtdO1xuICAgICAgICBsZXQgY29udGVudDtcblxuICAgICAgICBpZiAoIXRoaXMuc3RhdGUuc3RhcnRlZCkge1xuICAgICAgICAgICAgY29udGVudCA9IDxkaXYgY2xhc3NOYW1lPVwic3RhcnRcIj5cbiAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIGNsYXNzTmFtZT1cInN0YXJ0QnRuXCIgb25DbGljaz17dGhpcy5zdGFydC5iaW5kKHRoaXMpfT5TdGFydDwvYT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBjb250ZW50ID0gPE1lc3NhZ2VzIG1lc3NhZ2VzPXt0aGlzLnN0YXRlLm1lc3NhZ2VzfSAvPlxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDxkaXY+XG4gICAgICAgICAgPEhlYWQ+XG4gICAgICAgICAgICA8c3R5bGU+e2BcbiAgICAgICAgICAgICAgICBib2R5IHtcbiAgICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBWZXJkYW5hO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC5zdGFydCB7XG4gICAgICAgICAgICAgICAgICB3aWR0aDogMTAwdnc7XG4gICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMHZoO1xuICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAuc3RhcnRCdG4ge1xuICAgICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgICAgICAgcGFkZGluZzogMzBweDtcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlZDJkMjM7XG4gICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxNXB4O1xuICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiA1NnB4O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC5tZXNzYWdlcyB7XG4gICAgICAgICAgICAgICAgICB3aWR0aDogMTAwdnc7XG4gICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMHZoO1xuICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLm1lc3NhZ2Uge1xuICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDNweDtcbiAgICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC5uaWNrTmFtZSB7XG4gICAgICAgICAgICAgICAgICBjb2xvcjogXCIjRUZFRkVGXCI7XG4gICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDMwcHg7XG4gICAgICAgICAgICAgICAgICBmb250LXNpemU6IDExcHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBgfTwvc3R5bGU+XG4gICAgICAgICAgPC9IZWFkPlxuICAgICAgICAgIHtjb250ZW50fVxuICAgICAgICA8L2Rpdj47XG5cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE9tZWdsZVZpZXc7XG4iXX0=\n\n ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', \"/Users/timbroddin/Sites/omegle-mitm/pages/index.js\"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, \"/Users/timbroddin/Sites/omegle-mitm/pages/index.js\"); } } })();\n    (function (Component, route) {\n      if (false) return\n      if (false) return\n\n      var qs = __webpack_require__(45)\n      var params = qs.parse(__resourceQuery.slice(1))\n      if (params.entry == null) return\n\n      module.hot.accept()\n      Component.__route = route\n\n      if (module.hot.status() === 'idle') return\n\n      var components = next.router.components\n      for (var r in components) {\n        if (!components.hasOwnProperty(r)) continue\n\n        if (components[r].Component.__route === route) {\n          next.router.update(r, Component)\n        }\n      }\n    })(module.exports.default || module.exports, \"/\")\n  \n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), \"?entry\"))\n\n/***/ },\n\n/***/ 539:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(process) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(16);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(10);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(11);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(18);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(17);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = __webpack_require__(7);\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Messages = function (_Component) {\n    (0, _inherits3.default)(Messages, _Component);\n\n    function Messages() {\n        (0, _classCallCheck3.default)(this, Messages);\n        return (0, _possibleConstructorReturn3.default)(this, (Messages.__proto__ || (0, _getPrototypeOf2.default)(Messages)).apply(this, arguments));\n    }\n\n    (0, _createClass3.default)(Messages, [{\n        key: \"componentDidUpdate\",\n        value: function componentDidUpdate() {\n            this.refs.messages.scrollTop = this.refs.messages.scrollHeight;\n        }\n    }, {\n        key: \"render\",\n        value: function render() {\n            var messages = this.props.messages;\n\n\n            return _react2.default.createElement(\n                \"div\",\n                { className: \"messages\", ref: \"messages\" },\n                messages.map(function (message, k) {\n                    if (message.type == 'Message') {\n                        return _react2.default.createElement(\n                            \"div\",\n                            { className: \"message\", key: \"message-\" + k },\n                            _react2.default.createElement(\n                                \"span\",\n                                { className: \"nickName\" },\n                                message.name\n                            ),\n                            _react2.default.createElement(\n                                \"span\",\n                                { className: \"message\" },\n                                message.text\n                            )\n                        );\n                    } else {\n                        return _react2.default.createElement(\"hr\", { key: \"message-\" + k });\n                    }\n                })\n            );\n        }\n    }]);\n    return Messages;\n}(_react.Component);\n\nexports.default = Messages;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvTWVzc2FnZXMuanMiXSwibmFtZXMiOlsiTWVzc2FnZXMiLCJyZWZzIiwibWVzc2FnZXMiLCJzY3JvbGxUb3AiLCJzY3JvbGxIZWlnaHQiLCJwcm9wcyIsIm1hcCIsIm1lc3NhZ2UiLCJrIiwidHlwZSIsIm5hbWUiLCJ0ZXh0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7SUFFTUEsUTs7Ozs7Ozs7Ozs2Q0FDaUI7QUFDbkIsaUJBQUtDLElBQUwsQ0FBVUMsUUFBVixDQUFtQkMsU0FBbkIsR0FBK0IsS0FBS0YsSUFBTCxDQUFVQyxRQUFWLENBQW1CRSxZQUFsRDtBQUNEOzs7aUNBRVE7QUFBQSxnQkFDQUYsUUFEQSxHQUNZLEtBQUtHLEtBRGpCLENBQ0FILFFBREE7OztBQUdQLG1CQUFPO0FBQUE7QUFBQSxrQkFBSyxXQUFVLFVBQWYsRUFBMEIsS0FBSSxVQUE5QjtBQUNGQSx5QkFBU0ksR0FBVCxDQUFhLFVBQUNDLE9BQUQsRUFBVUMsQ0FBVixFQUFnQjtBQUMxQix3QkFBSUQsUUFBUUUsSUFBUixJQUFnQixTQUFwQixFQUErQjtBQUMzQiwrQkFBTztBQUFBO0FBQUEsOEJBQUssV0FBVSxTQUFmLEVBQXlCLGtCQUFnQkQsQ0FBekM7QUFDSDtBQUFBO0FBQUEsa0NBQU0sV0FBVSxVQUFoQjtBQUE0QkQsd0NBQVFHO0FBQXBDLDZCQURHO0FBRUg7QUFBQTtBQUFBLGtDQUFNLFdBQVUsU0FBaEI7QUFBMkJILHdDQUFRSTtBQUFuQztBQUZHLHlCQUFQO0FBSUgscUJBTEQsTUFLTztBQUNILCtCQUFPLHNDQUFJLGtCQUFnQkgsQ0FBcEIsR0FBUDtBQUNIO0FBQ0osaUJBVEE7QUFERSxhQUFQO0FBWUQ7Ozs7O2tCQUlZUixRIiwiZmlsZSI6Ik1lc3NhZ2VzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy90aW1icm9kZGluL1NpdGVzL29tZWdsZS1taXRtIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50fSBmcm9tICdyZWFjdCc7XG5cbmNsYXNzIE1lc3NhZ2VzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHRoaXMucmVmcy5tZXNzYWdlcy5zY3JvbGxUb3AgPSB0aGlzLnJlZnMubWVzc2FnZXMuc2Nyb2xsSGVpZ2h0O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHttZXNzYWdlc30gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwibWVzc2FnZXNcIiByZWY9XCJtZXNzYWdlc1wiPlxuICAgICAgICB7bWVzc2FnZXMubWFwKChtZXNzYWdlLCBrKSA9PiB7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS50eXBlID09ICdNZXNzYWdlJykge1xuICAgICAgICAgICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cIm1lc3NhZ2VcIiBrZXk9e2BtZXNzYWdlLSR7a31gfT5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibmlja05hbWVcIj57bWVzc2FnZS5uYW1lfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibWVzc2FnZVwiPnttZXNzYWdlLnRleHR9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gPGhyIGtleT17YG1lc3NhZ2UtJHtrfWB9Lz5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSl9XG4gICAgPC9kaXY+XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBNZXNzYWdlcztcbiJdfQ==\n\n ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', \"/Users/timbroddin/Sites/omegle-mitm/components/Messages.js\"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, \"/Users/timbroddin/Sites/omegle-mitm/components/Messages.js\"); } } })();\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ },\n\n/***/ 540:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(process) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(10);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(11);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Omegle = function () {\n    function Omegle() {\n        (0, _classCallCheck3.default)(this, Omegle);\n\n        this.listeners = [];\n        this.isConnected = true;\n        this.queueMessages = [];\n        this.hasPartner = false;\n    }\n\n    (0, _createClass3.default)(Omegle, [{\n        key: 'start',\n        value: function start() {\n            var _this = this;\n\n            this.queueMessages = [];\n            fetch('/proxy/start?rcs=1&firstevents=1&spid=&randid=PBBN7SY8&lang=nl', {\n                method: 'POST',\n                headers: {\n                    'Connection': 'keep-alive',\n                    'User-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36'\n                }\n            }).then(function (response) {\n                return response.text();\n            }).then(function (text) {\n                return JSON.parse(text);\n            }).then(function (response) {\n                if (response && response.clientID) {\n                    console.log('Connected to Omegle');\n                    _this.connected();\n                    _this.parseEvents(response.events);\n                    _this.clientID = response.clientID;\n                    console.log('ClientId: ' + _this.clientID);\n                    _this.isConnected = true;\n                    _this.getEvents();\n                } else {\n                    console.log('Server down?');\n                    setTimeout(function () {\n                        _this.start();\n                    }, 2000);\n                }\n            });\n        }\n    }, {\n        key: 'getEvents',\n        value: function getEvents() {\n            var _this2 = this;\n\n            if (!this.isConnected) return false;\n\n            console.log(this.clientID + ' Getting events');\n            fetch('/proxy/events', {\n                method: 'POST',\n                body: 'id=' + encodeURIComponent(this.clientID),\n                json: true,\n                headers: {\n                    'Connection': 'keep-alive',\n                    'User-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36',\n                    'Content-Type': 'application/x-www-form-urlencoded'\n\n                }\n            }).then(function (response) {\n                return response.text();\n            }).then(function (text) {\n                return JSON.parse(text);\n            }).then(function (response) {\n                if (response) {\n                    _this2.parseEvents(response);\n                    _this2.getEvents();\n                } else {\n                    setTimeout(function () {\n                        _this2.getEvents();\n                    }, 1000);\n                }\n            });\n        }\n    }, {\n        key: 'parseEvents',\n        value: function parseEvents(events) {\n            var _this3 = this;\n\n            if (!events) return;\n\n            events.forEach(function (event) {\n                var type = event[0];\n                var payload = event[1];\n\n                switch (type) {\n                    case 'gotMessage':\n                        _this3.receiveMessage(payload);\n                        break;\n                    case 'typing':\n                        _this3.typing();\n                        break;\n                    case 'statusInfo':\n                        _this3.statusInfo(payload);\n                        break;\n                    case 'strangerDisconnected':\n                        _this3.disconnected();\n                        break;\n                    case 'connected':\n                        _this3.hasPartner = true;\n                        _this3.queueMessages.forEach(function (txt) {\n                            console.log('Sending message queue');\n                            _this3.sendMessage(txt);\n                        });\n                        break;\n                    default:\n                }\n            });\n        }\n    }, {\n        key: 'connected',\n        value: function connected() {\n            this.message('connect', true);\n        }\n    }, {\n        key: 'receiveMessage',\n        value: function receiveMessage(text) {\n            this.message('message', text);\n        }\n    }, {\n        key: 'statusInfo',\n        value: function statusInfo(info) {}\n    }, {\n        key: 'typing',\n        value: function typing() {\n            console.log(this.clientID + ' is typing');\n\n            this.message('typing', true);\n        }\n    }, {\n        key: 'sendMessage',\n        value: function sendMessage(txt) {\n            if (!this.hasPartner) {\n                console.log('Add to queue');\n                this.queueMessages.push(text);\n            }\n\n            console.log(this.clientID + ' Send message ' + txt);\n\n            fetch('/proxy/send', {\n                method: 'POST',\n                body: 'id=' + encodeURIComponent(this.clientID) + '&msg=' + encodeURIComponent(txt),\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).then(function (response) {});\n        }\n    }, {\n        key: 'sendTyping',\n        value: function sendTyping() {\n\n            console.log(this.clientID + ' Send typing');\n\n            fetch('/proxy/typing', {\n                method: 'POST',\n                body: 'id=' + encodeURIComponent(this.clientID),\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).then(function (response) {});\n        }\n    }, {\n        key: 'disconnected',\n        value: function disconnected() {\n            this.isConnected = false;\n            this.message('disconnect', true);\n        }\n    }, {\n        key: 'on',\n        value: function on(type, cb) {\n            if (!this.listeners[type]) {\n                this.listeners[type] = [];\n            }\n            this.listeners[type].push(cb);\n        }\n    }, {\n        key: 'message',\n        value: function message(type, payload) {\n            if (this.listeners[type]) {\n                this.listeners[type].forEach(function (cb) {\n                    cb(payload);\n                });\n            } else {}\n        }\n    }]);\n    return Omegle;\n}();\n\nexports.default = Omegle;\n//# sourceMappingURL=data:application/json;base64,\n\n ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', \"/Users/timbroddin/Sites/omegle-mitm/omegle/Omegle.js\"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, \"/Users/timbroddin/Sites/omegle-mitm/omegle/Omegle.js\"); } } })();\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ },\n\n/***/ 576:\n/***/ function(module, exports, __webpack_require__) {\n\n__webpack_require__(33);\nmodule.exports = __webpack_require__(239);\n\n\n/***/ }\n\n},[576]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}